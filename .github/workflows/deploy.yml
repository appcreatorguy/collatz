name: deploy standalone binaries and wheels

on:
  push:
    tags:
      - "*"

jobs:
  create_release:
    runs-on: ubuntu-latest
    steps:
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::Version ${GITHUB_REF/refs\/tags\//}
      - uses: actions/checkout@v2
      - uses: ncipollo/release-action@v1.8.6
        with:
          name: ${{ steps.get_version.outputs.VERSION }}
          bodyFile: "CHANGES.md"
          token: ${{ secrets.GITHUB_TOKEN }}
  build_binaries:
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2019, ubuntu-20.04, macos-latest]
        include:
          - os: windows-2019
            asset_name: simple_collatz_windows.exe
            executable_mime: "application/vnd.microsoft.portable-executable"
          - os: ubuntu-20.04
            asset_name: simple_collatz_linux
            executable_mime: "application/x-executable"

    steps:
      - uses: actions/checkout@v2

      - name: Set up latest Python
        uses: actions/setup-python@v2
        with:
          python-version: "*"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel setuptools
          python -m pip install .
          python -m pip install pyinstaller

      - name: Build binary
        run: |
          python -m PyInstaller -F --name ${{ matrix.asset_name }} simple_collatz/__main__.py

      - name: Upload binary as release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: dist/${{ matrix.asset_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: ${{ matrix.executable_mime }}
  build_dist:
    name: PyPI Upload
    runs-on: ubuntu-latest
    needs: create_release

    steps:
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::simple_collatz-${GITHUB_REF/refs\/tags\//}-py3-none-any.whl
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2

      - name: Install latest pip, setuptools, twine + wheel
        run: |
          python -m pip install --upgrade pip setuptools twine wheel

      - name: Build wheels
        run: |
          python setup.py bdist_wheel
          python setup.py sdist

      - name: Upload to PyPI via Twine
        env:
          TWINE_PASSWORD: ${{ secrets.TESTPYPI_TOKEN }}
        run: |
          twine upload --verbose --repository testpypi -u '__token__' dist/*
      - name: Upload wheel as release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: dist/*.whl
          asset_name: ${{ steps.get_version.outputs.VERSION }}
          asset_content_type: application/x-wheel+zip
